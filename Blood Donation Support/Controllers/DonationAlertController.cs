using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Blood_Donation_Support.Data;
using Microsoft.AspNetCore.Authorization;

namespace Blood_Donation_Support.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class DonationAlertController : ControllerBase
    {
        private readonly BloodDonationSupportContext _context;

        public DonationAlertController(BloodDonationSupportContext context)
        {
            _context = context;
        }

        // GET: api/DonationAlert/LastSuccessfulDonation/{memberId}
        [HttpGet("LastSuccessfulDonation/{memberId}")]
        public async Task<IActionResult> GetLastSuccessfulDonation(int memberId)
        {
            // Ki·ªÉm tra member ch·ªâ xem ƒë∆∞·ª£c d·ªØ li·ªáu c·ªßa m√¨nh
            if (!IsCurrentUser(memberId))
                return Forbid();

            var lastDonation = await _context.DonationRequests
                .Where(d => d.MemberId == memberId && d.Status == "Completed")
                .OrderByDescending(d => d.ApprovalDate ?? (d.PreferredDonationDate.HasValue ? d.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue) : (DateTime?)null))
                .FirstOrDefaultAsync();

            if (lastDonation == null)
                return NotFound(new { message = "Ch∆∞a c√≥ l·ªãch s·ª≠ hi·∫øn m√°u th√†nh c√¥ng." });

            DateTime? approvalDate = lastDonation.ApprovalDate;
            DateTime? preferredDate = lastDonation.PreferredDonationDate.HasValue
                ? lastDonation.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue)
                : (DateTime?)null;
            var lastDate = approvalDate ?? preferredDate;
            return Ok(new { lastDate });
        }

        // GET: api/DonationAlert/CheckDonationEligibility/{memberId}
        [HttpGet("CheckDonationEligibility/{memberId}")]
        public async Task<IActionResult> CheckDonationEligibility(int memberId)
        {
            // Ki·ªÉm tra member ch·ªâ xem ƒë∆∞·ª£c d·ªØ li·ªáu c·ªßa m√¨nh
            if (!IsCurrentUser(memberId))
                return Forbid();

            var lastDonation = await _context.DonationRequests
                .Where(d => d.MemberId == memberId && d.Status == "Completed")
                .OrderByDescending(d => d.ApprovalDate ?? (d.PreferredDonationDate.HasValue ? d.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue) : (DateTime?)null))
                .FirstOrDefaultAsync();

            if (lastDonation == null)
            {
                // Ch∆∞a hi·∫øn m√°u l·∫ßn n√†o -> c√≥ th·ªÉ hi·∫øn m√°u
                return Ok(new { 
                    canDonate = true,
                    message = "B·∫°n ch∆∞a hi·∫øn m√°u l·∫ßn n√†o. C√≥ th·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u.",
                    lastDonationDate = (DateTime?)null,
                    recoveryDate = (DateTime?)null,
                    daysUntilRecovery = 0
                });
            }

            DateTime? approvalDate = lastDonation.ApprovalDate;
            DateTime? preferredDate = lastDonation.PreferredDonationDate.HasValue
                ? lastDonation.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue)
                : (DateTime?)null;
            var lastDonationDate = approvalDate ?? preferredDate;

            // T√≠nh ng√†y ph·ª•c h·ªìi (84 ng√†y = 12 tu·∫ßn)
            var recoveryDate = lastDonationDate.Value.AddDays(84);
            var currentDate = DateTime.Now;
            var daysUntilRecovery = (recoveryDate - currentDate).Days;
            var canDonate = currentDate >= recoveryDate;

            string message;
            if (canDonate)
            {
                message = "B·∫°n ƒë√£ ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u! C√≥ th·ªÉ ƒëƒÉng k√Ω ngay.";
            }
            else
            {
                message = $"B·∫°n c·∫ßn th√™m {daysUntilRecovery} ng√†y ƒë·ªÉ ph·ª•c h·ªìi ho√†n to√†n. Ng√†y c√≥ th·ªÉ hi·∫øn m√°u: {recoveryDate:dd/MM/yyyy}";
            }

            return Ok(new { 
                canDonate,
                message,
                lastDonationDate,
                recoveryDate,
                daysUntilRecovery
            });
        }

        // GET: api/DonationAlert/LoginNotification/{memberId}
        [HttpGet("LoginNotification/{memberId}")]
        public async Task<IActionResult> GetLoginNotification(int memberId)
        {
            // Ki·ªÉm tra member ch·ªâ xem ƒë∆∞·ª£c d·ªØ li·ªáu c·ªßa m√¨nh
            if (!IsCurrentUser(memberId))
                return Forbid();

            var lastDonation = await _context.DonationRequests
                .Where(d => d.MemberId == memberId && d.Status == "Completed")
                .OrderByDescending(d => d.ApprovalDate ?? (d.PreferredDonationDate.HasValue ? d.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue) : (DateTime?)null))
                .FirstOrDefaultAsync();

            if (lastDonation == null)
            {
                return Ok(new { 
                    showNotification = true,
                    type = "FirstTime",
                    title = "Ch√†o m·ª´ng b·∫°n!",
                    message = "B·∫°n ch∆∞a hi·∫øn m√°u l·∫ßn n√†o. H√£y ƒëƒÉng k√Ω hi·∫øn m√°u ƒë·ªÉ c·ª©u ng∆∞·ªùi!",
                    actionUrl = "/donation-registration"
                });
            }

            DateTime? approvalDate = lastDonation.ApprovalDate;
            DateTime? preferredDate = lastDonation.PreferredDonationDate.HasValue
                ? lastDonation.PreferredDonationDate.Value.ToDateTime(TimeOnly.MinValue)
                : (DateTime?)null;
            var lastDonationDate = approvalDate ?? preferredDate;
            var recoveryDate = lastDonationDate.Value.AddDays(84);
            var currentDate = DateTime.Now;
            var daysUntilRecovery = (recoveryDate - currentDate).Days;

            if (currentDate >= recoveryDate)
            {
                return Ok(new { 
                    showNotification = true,
                    type = "ReadyToDonate",
                    title = "ü©∏ Nh·∫Øc nh·ªü hi·∫øn m√°u",
                    message = "B·∫°n ƒë√£ c√≥ th·ªÉ hi·∫øn m√°u l·∫°i! H√£y ƒëƒÉng k√Ω ngay ƒë·ªÉ c·ª©u ng∆∞·ªùi.",
                    actionUrl = "/donation-registration"
                });
            }
            else if (daysUntilRecovery <= 7)
            {
                return Ok(new { 
                    showNotification = true,
                    type = "AlmostReady",
                    title = "‚è∞ S·∫Øp ƒë·∫øn ng√†y hi·∫øn m√°u",
                    message = $"C√≤n {daysUntilRecovery} ng√†y n·ªØa b·∫°n c√≥ th·ªÉ hi·∫øn m√°u l·∫°i. Ng√†y: {recoveryDate:dd/MM/yyyy}",
                    actionUrl = "/donation-registration"
                });
            }
            else
            {
                return Ok(new { 
                    showNotification = false,
                    message = "B·∫°n ƒëang trong th·ªùi gian ph·ª•c h·ªìi."
                });
            }
        }

        // Helper method ƒë·ªÉ ki·ªÉm tra user hi·ªán t·∫°i
        private bool IsCurrentUser(int memberId)
        {
            var userIdClaim = User.FindFirst("UserId")?.Value;
            if (!int.TryParse(userIdClaim, out int currentUserId))
                return false;

            // Ki·ªÉm tra memberId c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
            var member = _context.Members.FirstOrDefault(m => m.UserId == currentUserId);
            return member != null && currentUserId == memberId;
        }
    }
}
