using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Blood_Donation_Support.Data;
using Blood_Donation_Support.Model;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Blood_Donation_Support.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class NotificationController : ControllerBase
    {
        private readonly BloodDonationSupportContext _context;
        public NotificationController(BloodDonationSupportContext context)
        {
            _context = context;
        }

        // ===== API L·∫§Y TH√îNG B√ÅO C·ª¶A USER =====
        // GET: api/Notification/GetUserNotifications/{userId}
        [HttpGet("GetUserNotifications/{userId}")]
        public async Task<IActionResult> GetUserNotifications(int userId)
        {
            // TI√äU CH√ç: Ch·ªâ l·∫•y th√¥ng b√°o c√≤n ho·∫°t ƒë·ªông (IsActive = true) v√† s·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
            var notifications = await _context.Notifications
                .Where(n => n.UserId == userId && n.IsActive)
                .OrderByDescending(n => n.CreatedAt)
                .ToListAsync();
            return Ok(notifications);
        }

        // ===== API ƒê√ÅNH D·∫§U ƒê√É ƒê·ªåC TH√îNG B√ÅO =====
        // PUT: api/Notification/MarkAsRead/{notificationId}
        [HttpPut("MarkAsRead/{notificationId}")]
        public async Task<IActionResult> MarkAsRead(int notificationId)
        {
            var notification = await _context.Notifications.FirstOrDefaultAsync(n => n.NotificationId == notificationId);
            if (notification == null) return NotFound();
            notification.IsRead = true;
            await _context.SaveChangesAsync();
            return Ok();
        }

        // ===== API ƒê√ÅNH D·∫§U T·∫§T C·∫¢ TH√îNG B√ÅO ƒê√É ƒê·ªåC =====
        // PUT: api/Notification/MarkAllAsRead/{userId}
        [HttpPut("MarkAllAsRead/{userId}")]
        public async Task<IActionResult> MarkAllAsRead(int userId)
        {
            // TI√äU CH√ç: Ch·ªâ ƒë√°nh d·∫•u nh·ªØng th√¥ng b√°o ch∆∞a ƒë·ªçc v√† c√≤n ho·∫°t ƒë·ªông
            var unread = await _context.Notifications.Where(n => n.UserId == userId && !n.IsRead && n.IsActive).ToListAsync();
            foreach (var n in unread) n.IsRead = true;
            await _context.SaveChangesAsync();
            return Ok();
        }

        // ===== API T·∫†O TH√îNG B√ÅO Y√äU C·∫¶U HI·∫æN M√ÅU KH·∫®N C·∫§P =====
        // POST: api/Notification/CreateUrgentDonationRequest
        [HttpPost("CreateUrgentDonationRequest")]
        public async Task<IActionResult> CreateUrgentDonationRequest([FromBody] UrgentDonationRequestDTO request)
        {
            // ===== TI√äU CH√ç 1: TR√ÅNH T·∫†O TH√îNG B√ÅO TR√ôNG L·∫∂P =====
            // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o kh·∫©n c·∫•p ch∆∞a ƒë·ªçc cho user n√†y ch∆∞a
            // ƒêi·ªÅu ki·ªán: C√πng UserId + NotificationType = "UrgentDonationRequest" + Ch∆∞a ƒë·ªçc + C√≤n ho·∫°t ƒë·ªông
            var exists = await _context.Notifications.AnyAsync(n => 
                n.UserId == request.UserId && 
                n.NotificationType == "UrgentDonationRequest" && 
                !n.IsRead && 
                n.IsActive);

            if (!exists)
            {
                // ===== TI√äU CH√ç 2: T·∫†O TH√îNG B√ÅO CHO USER =====
                // Ch·ªâ t·∫°o th√¥ng b√°o n·∫øu ch∆∞a c√≥ th√¥ng b√°o t∆∞∆°ng t·ª±
                var notification = new Notification
                {
                    UserId = request.UserId,
                    Title = "Y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p",
                    Message = request.Message,
                    NotificationType = "UrgentDonationRequest",
                    CreatedAt = DateTime.Now,
                    IsActive = true,
                    IsRead = false
                };
                _context.Notifications.Add(notification);
                await _context.SaveChangesAsync();
            }

            // ===== TI√äU CH√ç 3: TH√îNG B√ÅO CHO ADMIN (T√ôY CH·ªåN) =====
            // N·∫øu c√≥ y√™u c·∫ßu th√¥ng b√°o cho admin (NotifyAdmin = true)
            if (request.NotifyAdmin)
            {
                // L·∫•y danh s√°ch user c√≥ role Admin v√† c√≤n ho·∫°t ƒë·ªông
                var adminUsers = await _context.Users.Include(u => u.Role)
                    .Where(u => u.Role.Name == "Admin" && u.IsActive)
                    .ToListAsync();
                
                // T·∫°o th√¥ng b√°o cho t·ª´ng admin
                foreach (var admin in adminUsers)
                {
                    var adminNotification = new Notification
                    {
                        UserId = admin.UserId,
                        Title = "H·ªá th·ªëng: C√≥ y√™u c·∫ßu huy ƒë·ªông ng∆∞·ªùi hi·∫øn m√°u",
                        Message = request.Message,
                        NotificationType = "DonorMobilization",
                        CreatedAt = DateTime.Now,
                        IsActive = true,
                        IsRead = false
                    };
                    _context.Notifications.Add(adminNotification);
                }
                await _context.SaveChangesAsync();
            }
            return Ok(new { message = "ƒê√£ g·ª≠i th√¥ng b√°o huy ƒë·ªông v√† th√¥ng b√°o cho admin (n·∫øu ch·ªçn)!" });
        }

        // ===== API T·∫†O TH√îNG B√ÅO NH·∫ÆC NH·ªû PH·ª§C H·ªíI =====
        // POST: api/Notification/CreateRecoveryReminder/{userId}
        [HttpPost("CreateRecoveryReminder/{userId}")]
        public async Task<IActionResult> CreateRecoveryReminder(int userId)
        {
            // ===== TI√äU CH√ç 1: KI·ªÇM TRA USER C√ì PH·∫¢I DONOR KH√îNG =====
            // Ch·ªâ t·∫°o th√¥ng b√°o cho user l√† donor (IsDonor = true)
            var member = await _context.Members.FirstOrDefaultAsync(m => m.UserId == userId);
            if (member == null || member.IsDonor != true)
            {
                // Kh√¥ng t·∫°o th√¥ng b√°o donor cho user kh√¥ng ph·∫£i donor
                return Ok();
            }

            // ===== TI√äU CH√ç 2: T√åM L·∫¶N HI·∫æN M√ÅU G·∫¶N NH·∫§T =====
            // L·∫•y l·∫ßn hi·∫øn m√°u ho√†n th√†nh g·∫ßn nh·∫•t ƒë·ªÉ t√≠nh th·ªùi gian ph·ª•c h·ªìi
            var lastDonation = await _context.DonationRequests
                .Where(d => d.MemberId == userId && d.Status == "Completed")
                .OrderByDescending(d => d.CompletionDate)
                .FirstOrDefaultAsync();

            string title, message, notificationType;
            DateTime? lastDonationDate = lastDonation?.CompletionDate;

            // ===== TI√äU CH√ç 3: PH√ÇN LO·∫†I TH√îNG B√ÅO THEO TR·∫†NG TH√ÅI =====
            if (lastDonation == null || lastDonationDate == null)
            {
                // Tr∆∞·ªùng h·ª£p 1: Ch∆∞a hi·∫øn m√°u l·∫ßn n√†o
                title = "üéâ Ch√†o m·ª´ng b·∫°n!";
                message = "B·∫°n ch∆∞a hi·∫øn m√°u l·∫ßn n√†o. H√£y ƒëƒÉng k√Ω hi·∫øn m√°u ƒë·ªÉ c·ª©u ng∆∞·ªùi!";
                notificationType = "FirstTime";
            }
            else
            {
                // ===== TI√äU CH√ç 4: T√çNH TO√ÅN TH·ªúI GIAN PH·ª§C H·ªíI =====
                // Th·ªùi gian ph·ª•c h·ªìi: 84 ng√†y sau l·∫ßn hi·∫øn m√°u g·∫ßn nh·∫•t
                var recoveryDate = lastDonationDate.Value.AddDays(84);
                var currentDate = DateTime.Now;
                var daysUntilRecovery = (recoveryDate - currentDate).Days;

                if (currentDate >= recoveryDate)
                {
                    // Tr∆∞·ªùng h·ª£p 2: ƒê√£ c√≥ th·ªÉ hi·∫øn m√°u l·∫°i (>= 84 ng√†y)
                    title = "Nh·∫Øc nh·ªü hi·∫øn m√°u";
                    message = "B·∫°n ƒë√£ c√≥ th·ªÉ hi·∫øn m√°u l·∫°i! H√£y ƒëƒÉng k√Ω ngay ƒë·ªÉ c·ª©u ng∆∞·ªùi.";
                    notificationType = "ReadyToDonate";
                }
                else if (daysUntilRecovery <= 7)
                {
                    // Tr∆∞·ªùng h·ª£p 3: S·∫Øp ƒë·∫øn ng√†y hi·∫øn m√°u (c√≤n <= 7 ng√†y)
                    title = "S·∫Øp ƒë·∫øn ng√†y hi·∫øn m√°u";
                    message = $"C√≤n {daysUntilRecovery} ng√†y n·ªØa b·∫°n c√≥ th·ªÉ hi·∫øn m√°u l·∫°i. Ng√†y: {recoveryDate:dd/MM/yyyy}";
                    notificationType = "AlmostReady";
                }
                else
                {
                    // Tr∆∞·ªùng h·ª£p 4: ƒêang trong th·ªùi gian ph·ª•c h·ªìi (> 7 ng√†y)
                    title = "Th√¥ng tin ph·ª•c h·ªìi";
                    message = $"B·∫°n ƒëang trong th·ªùi gian ph·ª•c h·ªìi. C√≤n {daysUntilRecovery} ng√†y n·ªØa c√≥ th·ªÉ hi·∫øn m√°u l·∫°i.";
                    notificationType = "RecoveryReminder";
                }
            }

            // ===== TI√äU CH√ç 5: TR√ÅNH T·∫†O TH√îNG B√ÅO TR√ôNG L·∫∂P =====
            // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o c√πng lo·∫°i ch∆∞a ƒë·ªçc cho user n√†y ch∆∞a
            var exists = await _context.Notifications.AnyAsync(n => 
                n.UserId == userId && 
                n.NotificationType == notificationType && 
                !n.IsRead && 
                n.IsActive);

            if (!exists)
            {
                // Ch·ªâ t·∫°o th√¥ng b√°o n·∫øu ch∆∞a c√≥ th√¥ng b√°o t∆∞∆°ng t·ª±
                var notification = new Notification
                {
                    UserId = userId,
                    Title = title,
                    Message = message,
                    NotificationType = notificationType,
                    CreatedAt = DateTime.Now,
                    IsActive = true,
                    IsRead = false
                };
                _context.Notifications.Add(notification);
                await _context.SaveChangesAsync();
            }
            return Ok();
        }
    }

    // ===== DTO CHO Y√äU C·∫¶U TH√îNG B√ÅO HI·∫æN M√ÅU KH·∫®N C·∫§P =====
    public class UrgentDonationRequestDTO
    {
        public int UserId { get; set; }           // ID c·ªßa user c·∫ßn g·ª≠i th√¥ng b√°o
        public string Message { get; set; }       // N·ªôi dung th√¥ng b√°o
        public bool NotifyAdmin { get; set; }     // C√≥ th√¥ng b√°o cho admin hay kh√¥ng
    }
} 