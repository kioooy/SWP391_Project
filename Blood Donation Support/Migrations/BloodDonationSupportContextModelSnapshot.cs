// <auto-generated />
using System;
using Blood_Donation_Support.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Blood_Donation_Support.Migrations
{
    [DbContext(typeof(BloodDonationSupportContext))]
    partial class BloodDonationSupportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blood_Donation_Support.Model.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId")
                        .HasName("PK__Article__9C6270E828DBB88A");

                    b.HasIndex("UserId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Blog", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId")
                        .HasName("PK__Blog__AA12601851852CFB");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodCompatibilityRule", b =>
                {
                    b.Property<int>("BloodRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodRuleId"));

                    b.Property<int>("BloodGiveId")
                        .HasColumnType("int");

                    b.Property<int>("BloodRecieveId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompatible")
                        .HasColumnType("bit");

                    b.HasKey("BloodRuleId")
                        .HasName("PK__BloodCom__B064ABB35D6040FE");

                    b.HasIndex("BloodGiveId");

                    b.HasIndex("BloodRecieveId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BloodCompatibilityRules");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodComponent", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ShelfLifeDays")
                        .HasColumnType("int");

                    b.HasKey("ComponentId")
                        .HasName("PK__BloodCom__D79CF04EF81C774D");

                    b.HasIndex(new[] { "ComponentName" }, "UQ__BloodCom__DB06D1C1797E03E4")
                        .IsUnique();

                    b.ToTable("BloodComponents");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodDonationPeriod", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodId"));

                    b.Property<int?>("CurrentQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodDateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PeriodDateTo")
                        .HasColumnType("datetime");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TargetQuantity")
                        .HasColumnType("int");

                    b.HasKey("PeriodId")
                        .HasName("PK__BloodDon__E521BB1638A97A10");

                    b.HasIndex("HospitalId");

                    b.ToTable("BloodDonationPeriod", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodReservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("BloodUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReservedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReservedById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransfusionId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId")
                        .HasName("PK__BloodRes__B9756D8A29A26A4A");

                    b.HasIndex("BloodUnitId");

                    b.HasIndex("ReservedById");

                    b.HasIndex("TransfusionId");

                    b.ToTable("BloodReservations");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodType", b =>
                {
                    b.Property<int>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodTypeId"));

                    b.Property<string>("BloodTypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("BloodTypeId")
                        .HasName("PK__BloodTyp__B489BA63BCFBE24A");

                    b.HasIndex(new[] { "BloodTypeName" }, "UQ__BloodTyp__3323606B027AB6F8")
                        .IsUnique();

                    b.ToTable("BloodTypes");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodUnit", b =>
                {
                    b.Property<int>("BloodUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodUnitId"));

                    b.Property<DateOnly?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("BloodStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingVolume")
                        .HasColumnType("int");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("BloodUnitId")
                        .HasName("PK__BloodUni__AC1C2F8B34CD649A");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MemberId");

                    b.ToTable("BloodUnits");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.DonationRequest", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("DonationVolume")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatientCondition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("PreferredDonationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ResponsibleById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DonationId")
                        .HasName("PK__Donation__C5082EFBE2E54925");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ResponsibleById");

                    b.ToTable("DonationRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HospitalId")
                        .HasName("PK__Hospital__BA9C464811D44BF0");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Member", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DonationCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRecipient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly?>("LastCheckupDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastDonationDate")
                        .HasColumnType("date");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<DateOnly?>("RecoveryDueDate")
                        .HasColumnType("date");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Members__1788CC4CC461D059");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__C90E2B1038E88F93");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1B0F2A3C4D");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__737584F6A0B1D3C2")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.TransfusionRequest", b =>
                {
                    b.Property<int>("TransfusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransfusionId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatientCondition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PreferredReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ResponsibleById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransfusionVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("TransfusionId")
                        .HasName("PK__Transfus__36A644FEFE95DAC4");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ResponsibleById");

                    b.ToTable("TransfusionRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.TransfusionRequestBloodUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AssignedVolume")
                        .HasColumnType("int");

                    b.Property<int>("BloodUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransfusionRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_TransfusionRequestBloodUnits_Id");

                    b.HasIndex("BloodUnitId");

                    b.HasIndex("TransfusionRequestId", "BloodUnitId")
                        .IsUnique()
                        .HasDatabaseName("UQ_TransfusionRequestBloodUnits_Request_Unit");

                    b.ToTable("TransfusionRequestBloodUnits", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.UrgentBloodRequest", b =>
                {
                    b.Property<int>("UrgentRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrgentRequestId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RelatedTransfusionRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RequestedBloodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UrgentRequestId")
                        .HasName("PK_UrgentBloodRequests_Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RelatedTransfusionRequestId");

                    b.HasIndex("RequestedBloodTypeId");

                    b.ToTable("UrgentBloodRequests", (string)null);
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CitizenNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C897D904A");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Users__85FB4E382215A452")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534423BF159")
                        .IsUnique();

                    b.HasIndex(new[] { "CitizenNumber" }, "UQ__Users__B2F0D91E87CE2AD8")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Article", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Article__UserId__0D7A0286");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Blog", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Blog__UserId__5EBF139D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodCompatibilityRule", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodGive")
                        .WithMany("BloodCompatibilityRuleBloodGives")
                        .HasForeignKey("BloodGiveId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodComp__Blood__5FB337D6");

                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodRecieve")
                        .WithMany("BloodCompatibilityRuleBloodRecieves")
                        .HasForeignKey("BloodRecieveId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodComp__Blood__60A75C0F");

                    b.HasOne("Blood_Donation_Support.Model.BloodComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_BloodCompatibilityRules_BloodComponents_ComponentId");

                    b.Navigation("BloodGive");

                    b.Navigation("BloodRecieve");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodDonationPeriod", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.Hospital", "Hospital")
                        .WithMany("BloodDonationPeriod")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodDona__Hospi__43D61337");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodReservation", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodUnit", "BloodUnit")
                        .WithMany()
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blood_Donation_Support.Model.User", "ReservedBy")
                        .WithMany()
                        .HasForeignKey("ReservedById");

                    b.HasOne("Blood_Donation_Support.Model.TransfusionRequest", "Transfusion")
                        .WithMany()
                        .HasForeignKey("TransfusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");

                    b.Navigation("ReservedBy");

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodUnit", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodType")
                        .WithMany("BloodUnits")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodUnit__Blood__619B8048");

                    b.HasOne("Blood_Donation_Support.Model.BloodComponent", "Component")
                        .WithMany("BloodUnits")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodUnit__Compo__628FA481");

                    b.HasOne("Blood_Donation_Support.Model.Member", "Member")
                        .WithMany("BloodUnits")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK__BloodUnit__Membe__1332DBDC");

                    b.Navigation("BloodType");

                    b.Navigation("Component");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.DonationRequest", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodComponent", "Component")
                        .WithMany("DonationRequests")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK__DonationR__Compo__66603565");

                    b.HasOne("Blood_Donation_Support.Model.Member", "Member")
                        .WithMany("DonationRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__DonationR__Membe__6477ECF3");

                    b.HasOne("Blood_Donation_Support.Model.BloodDonationPeriod", "Period")
                        .WithMany("DonationRequests")
                        .HasForeignKey("PeriodId")
                        .IsRequired()
                        .HasConstraintName("FK__DonationR__Perio__656C112C");

                    b.HasOne("Blood_Donation_Support.Model.User", "ResponsibleBy")
                        .WithMany("DonationRequests")
                        .HasForeignKey("ResponsibleById")
                        .HasConstraintName("FK__DonationR__Respo__6754599E");

                    b.Navigation("Component");

                    b.Navigation("Member");

                    b.Navigation("Period");

                    b.Navigation("ResponsibleBy");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Member", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodType")
                        .WithMany("Members")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__Members__BloodTy__6B24EA82");

                    b.HasOne("Blood_Donation_Support.Model.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("Blood_Donation_Support.Model.Member", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Members__UserId__6A30C649");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Notification", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__6C190EBB");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.TransfusionRequest", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodType")
                        .WithMany("TransfusionRequests")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Transfusi__Blood__6E01572D");

                    b.HasOne("Blood_Donation_Support.Model.BloodComponent", "Component")
                        .WithMany("TransfusionRequests")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK__Transfusi__Compo__6EF57B66");

                    b.HasOne("Blood_Donation_Support.Model.Member", "Member")
                        .WithMany("TransfusionRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Transfusi__Membe__6D0D32F4");

                    b.HasOne("Blood_Donation_Support.Model.User", "ResponsibleBy")
                        .WithMany("TransfusionRequests")
                        .HasForeignKey("ResponsibleById")
                        .HasConstraintName("FK__Transfusi__Respo__70DDC3D8");

                    b.Navigation("BloodType");

                    b.Navigation("Component");

                    b.Navigation("Member");

                    b.Navigation("ResponsibleBy");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.TransfusionRequestBloodUnit", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.BloodUnit", "BloodUnit")
                        .WithMany("TransfusionRequestBloodUnits")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TransfusionRequestBloodUnits_BloodUnits");

                    b.HasOne("Blood_Donation_Support.Model.TransfusionRequest", "TransfusionRequest")
                        .WithMany("TransfusionRequestBloodUnits")
                        .HasForeignKey("TransfusionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TransfusionRequestBloodUnits_TransfusionRequests");

                    b.Navigation("BloodUnit");

                    b.Navigation("TransfusionRequest");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.UrgentBloodRequest", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_UrgentBloodRequests_CreatedByUser");

                    b.HasOne("Blood_Donation_Support.Model.TransfusionRequest", "RelatedTransfusionRequest")
                        .WithMany()
                        .HasForeignKey("RelatedTransfusionRequestId")
                        .HasConstraintName("FK_UrgentBloodRequests_TransfusionRequests_Related");

                    b.HasOne("Blood_Donation_Support.Model.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("RequestedBloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UrgentBloodRequests_BloodTypes_Requested");

                    b.Navigation("BloodType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("RelatedTransfusionRequest");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.User", b =>
                {
                    b.HasOne("Blood_Donation_Support.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__17036CC0");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodComponent", b =>
                {
                    b.Navigation("BloodUnits");

                    b.Navigation("DonationRequests");

                    b.Navigation("TransfusionRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodDonationPeriod", b =>
                {
                    b.Navigation("DonationRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodType", b =>
                {
                    b.Navigation("BloodCompatibilityRuleBloodGives");

                    b.Navigation("BloodCompatibilityRuleBloodRecieves");

                    b.Navigation("BloodUnits");

                    b.Navigation("Members");

                    b.Navigation("TransfusionRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.BloodUnit", b =>
                {
                    b.Navigation("TransfusionRequestBloodUnits");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Hospital", b =>
                {
                    b.Navigation("BloodDonationPeriod");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Member", b =>
                {
                    b.Navigation("BloodUnits");

                    b.Navigation("DonationRequests");

                    b.Navigation("TransfusionRequests");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.TransfusionRequest", b =>
                {
                    b.Navigation("TransfusionRequestBloodUnits");
                });

            modelBuilder.Entity("Blood_Donation_Support.Model.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Blogs");

                    b.Navigation("DonationRequests");

                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("TransfusionRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
