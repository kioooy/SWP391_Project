import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import {
  Container, Typography, Paper, Box, Button, Alert, CircularProgress,
  TextField, FormControl, InputLabel, Select, MenuItem, Grid, Card, CardContent
} from '@mui/material';
import { CheckCircle as CheckIcon, Warning as WarningIcon } from '@mui/icons-material';
import axios from 'axios';

const UrgentBooking = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [memberInfo, setMemberInfo] = useState(null);
  const [error, setError] = useState(null);
  
  const token = searchParams.get('token');
  const memberId = searchParams.get('memberId');
  const urgentRequestId = searchParams.get('urgentRequestId');

  // Chuy·ªÉn memberId sang ki·ªÉu s·ªë ƒë·ªÉ tr√°nh g·ª≠i chu·ªói ho·∫∑c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
  const numericMemberId = Number(memberId);

  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5250/api';

  useEffect(() => {
    if (!token || !memberId || isNaN(numericMemberId) || numericMemberId <= 0) {
      setError('Link x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá. Thi·∫øu th√¥ng tin token ho·∫∑c memberId.');
      setLoading(false);
      return;
    }

    // L·∫•y th√¥ng tin member th·ª±c t·ª´ API
    const fetchMemberInfo = async () => {
      try {
        // S·ª≠ d·ª•ng endpoint m·ªõi ƒë·ªÉ l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß
        const userRes = await axios.get(`${API_URL}/User/${memberId}/urgent-booking-info`);
        
        setMemberInfo({
          memberId: memberId,
          fullName: userRes.data.fullName,
          bloodType: userRes.data.bloodTypeName,
          phone: userRes.data.phoneNumber,
          email: userRes.data.email
        });
      } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin member:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u. Vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        setLoading(false);
      }
    };

    fetchMemberInfo();
  }, [token, memberId]);

  const handleConfirmBooking = async () => {
    setSubmitting(true);
    try {
      // G·ªçi API ƒë·ªÉ t·∫°o l·ªãch hi·∫øn m√°u kh·∫©n c·∫•p
      // Ch·ªâ g·ª≠i c√°c tr∆∞·ªùng h·ª£p l·ªá theo UrgentBookingDTO
      const bookingData = {
        memberId: numericMemberId,
        notes: "Hi·∫øn m√°u kh·∫©n c·∫•p - Y√™u c·∫ßu t·ª´ email",
        token: token
      };

      console.log('üîç Debug: G·ª≠i booking data:', bookingData);
      console.log('üîç Debug: API URL:', `${API_URL}/DonationRequest/urgent-booking`);

      const response = await axios.post(`${API_URL}/DonationRequest/urgent-booking`, bookingData);
      
      console.log('üîç Debug: Response status:', response.status);
      console.log('üîç Debug: Response data:', response.data);
      
      if (response.status === 200) {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th√†nh c√¥ng
        navigate('/urgent-booking-success');
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (err) {
      console.error('‚ùå Debug: L·ªói khi ƒë·∫∑t l·ªãch hi·∫øn m√°u kh·∫©n c·∫•p:', err);
      console.error('‚ùå Debug: Error response:', err.response);
      console.error('‚ùå Debug: Error message:', err.message);
      
      if (err.response?.data?.message) {
        setError(err.response.data.message);
      } else if (err.response?.status === 404) {
        setError('API endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra backend.');
      } else if (err.response?.status === 500) {
        setError('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
        <Button variant="contained" onClick={() => navigate('/')}>
          V·ªÅ trang ch·ªß
        </Button>
      </Container>
    );
  }

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 3, color: '#d32f2f', textAlign: 'center' }}>
        üö® ƒê·∫∑t L·ªãch Hi·∫øn M√°u Kh·∫©n C·∫•p
      </Typography>

      <Alert severity="info" sx={{ mb: 3 }}>
        <Typography variant="body1">
          <strong>C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi y√™u c·∫ßu m√°u kh·∫©n c·∫•p!</strong><br />
          Vui l√≤ng x√°c nh·∫≠n th√¥ng tin hi·∫øn m√°u.
        </Typography>
      </Alert>

      {memberInfo && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Typography variant="h6" sx={{ mb: 2, color: '#1976d2' }}>
              Th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography><strong>H·ªç t√™n:</strong> {memberInfo.fullName}</Typography>
                <Typography><strong>Nh√≥m m√°u:</strong> {memberInfo.bloodType}</Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {memberInfo.phone}</Typography>
                <Typography><strong>Email:</strong> {memberInfo.email}</Typography>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" sx={{ mb: 2, color: '#d32f2f' }}>
          Th√¥ng tin hi·∫øn m√°u kh·∫©n c·∫•p
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <Typography variant="body1" sx={{ mb: 2 }}>
            <strong>ƒê·ªãa ƒëi·ªÉm:</strong> B·ªánh vi·ªán Truy·ªÅn m√°u Huy·∫øt h·ªçc<br />
            <strong>ƒê·ªãa ch·ªâ:</strong> 118 ƒê. H·ªìng B√†ng, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM<br />
            <strong>Th·ªùi gian:</strong> C√†ng s·ªõm c√†ng t·ªët (trong v√≤ng 24h)
          </Typography>
        </Box>

                 <Alert severity="warning" sx={{ mb: 3 }}>
           <Box>
             <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
               L∆∞u √Ω quan tr·ªçng:
             </Typography>
             <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
               <li>Vui l√≤ng ƒÉn no tr∆∞·ªõc khi hi·∫øn m√°u</li>
               <li>Mang theo CMND/CCCD</li>
               <li>Kh√¥ng u·ªëng r∆∞·ª£u bia trong 24h tr∆∞·ªõc khi hi·∫øn</li>
               <li>Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi hi·∫øn m√°u</li>
             </ul>
           </Box>
         </Alert>

        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
          <Button
            variant="outlined"
            color="inherit"
            onClick={() => navigate('/')}
            disabled={submitting}
          >
            H·ªßy
          </Button>
          <Button
            variant="contained"
            color="error"
            size="large"
            startIcon={submitting ? <CircularProgress size={20} /> : <CheckIcon />}
            onClick={handleConfirmBooking}
            disabled={submitting}
          >
            {submitting ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n hi·∫øn m√°u kh·∫©n c·∫•p'}
          </Button>
        </Box>
      </Paper>
    </Container>
  );
};

export default UrgentBooking; 