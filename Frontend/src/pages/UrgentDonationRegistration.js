import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Button,
  TextField,
  Typography,
  Alert,
  Card,
  CardContent,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Divider,
  CircularProgress,
  Snackbar,
  Alert as MuiAlert,
} from '@mui/material';
import { Bloodtype, Warning, Schedule, LocationOn } from '@mui/icons-material';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5250/api';

const validationSchema = Yup.object({
  componentId: Yup.number()
    .required('Ch·∫ø ph·∫©m m√°u l√† b·∫Øt bu·ªôc'),
  donationVolume: Yup.number()
    .min(250, 'L∆∞·ª£ng m√°u t·ªëi thi·ªÉu l√† 250ml')
    .max(500, 'L∆∞·ª£ng m√°u t·ªëi ƒëa l√† 500ml')
    .required('L∆∞·ª£ng m√°u hi·∫øn l√† b·∫Øt bu·ªôc'),
  notes: Yup.string()
    .max(500, 'Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±'),
  patientCondition: Yup.string()
    .required('T√¨nh tr·∫°ng b·ªánh nh√¢n l√† b·∫Øt bu·ªôc'),
});

const UrgentDonationRegistration = () => {
  const navigate = useNavigate();
  const [urgentRequest, setUrgentRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [bloodComponents, setBloodComponents] = useState([]);

  // L·∫•y th√¥ng tin t·ª´ localStorage
  const urgentRequestId = localStorage.getItem('urgentRequestId');
  const bloodType = localStorage.getItem('bloodType');

  useEffect(() => {
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const token = localStorage.getItem('token');
    if (!token) {
      setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p');
      setLoading(false);
      return;
    }

    // Ki·ªÉm tra th√¥ng tin urgent request
    if (!urgentRequestId || !bloodType) {
      setError('Th√¥ng tin y√™u c·∫ßu kh·∫©n c·∫•p kh√¥ng h·ª£p l·ªá');
      setLoading(false);
      return;
    }

    // L·∫•y th√¥ng tin chi ti·∫øt y√™u c·∫ßu kh·∫©n c·∫•p
    fetchUrgentRequestDetails();
    // L·∫•y danh s√°ch ch·∫ø ph·∫©m m√°u
    fetchBloodComponents();
  }, [urgentRequestId]);

  const fetchUrgentRequestDetails = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/UrgentBloodRequest/${urgentRequestId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin y√™u c·∫ßu kh·∫©n c·∫•p');
      }

      const data = await response.json();
      setUrgentRequest(data);
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin y√™u c·∫ßu kh·∫©n c·∫•p:', error);
      setError('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin y√™u c·∫ßu kh·∫©n c·∫•p');
    } finally {
      setLoading(false);
    }
  };

  const fetchBloodComponents = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/BloodComponent`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·∫ø ph·∫©m m√°u');
      }

      const data = await response.json();
      setBloodComponents(data);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch ch·∫ø ph·∫©m m√°u:', error);
    }
  };

  const formik = useFormik({
    initialValues: {
      componentId: '',
      donationVolume: 350,
      notes: '',
      patientCondition: '',
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        const user = JSON.parse(localStorage.getItem('user') || '{}');

        const donationRequest = {
          memberId: user.UserId,
          componentId: parseInt(values.componentId),
          responsibleById: 1, // Default staff ID
          donationVolume: parseInt(values.donationVolume),
          notes: values.notes,
          patientCondition: values.patientCondition,
          urgentRequestId: parseInt(urgentRequestId), // Li√™n k·∫øt v·ªõi y√™u c·∫ßu kh·∫©n c·∫•p
        };

        const response = await fetch(`${API_BASE_URL}/DonationRequest/register-urgent`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify(donationRequest),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω');
        }

        const result = await response.json();
        setSuccess(true);
        setSnackbar({
          open: true,
          message: 'ƒêƒÉng k√Ω hi·∫øn m√°u kh·∫©n c·∫•p th√†nh c√¥ng!',
          severity: 'success',
        });

        // X√≥a th√¥ng tin urgent donation kh·ªèi localStorage
        localStorage.removeItem('urgentRequestId');
        localStorage.removeItem('bloodType');

        // Chuy·ªÉn ƒë·∫øn trang th√†nh c√¥ng sau 2 gi√¢y
        setTimeout(() => {
          navigate('/urgent-donation-success', { 
            state: { 
              donationId: result.donationId,
              urgentRequestId: urgentRequestId 
            } 
          });
        }, 2000);

      } catch (error) {
        console.error('L·ªói khi ƒëƒÉng k√Ω hi·∫øn m√°u:', error);
        setSnackbar({
          open: true,
          message: error.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω hi·∫øn m√°u',
          severity: 'error',
        });
      } finally {
        setLoading(false);
      }
    },
  });

  if (loading) {
    return (
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '100vh' 
      }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '100vh',
        flexDirection: 'column',
        gap: 2
      }}>
        <Alert severity="error" sx={{ maxWidth: 500 }}>
          {error}
        </Alert>
        <Button variant="contained" onClick={() => navigate('/')}>
          V·ªÅ trang ch·ªß
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      py: 4,
      px: 2
    }}>
      <Box sx={{ maxWidth: 800, mx: 'auto' }}>
        {/* Header */}
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom sx={{ color: '#d32f2f', fontWeight: 'bold' }}>
            ü©∏ ƒêƒÉng K√Ω Hi·∫øn M√°u Kh·∫©n C·∫•p
          </Typography>
          <Typography variant="h6" color="text.secondary">
            M·ªôt m·∫°ng ng∆∞·ªùi ƒëang c·∫ßn s·ª± gi√∫p ƒë·ª° c·ªßa b·∫°n!
          </Typography>
        </Box>

        {/* Th√¥ng tin y√™u c·∫ßu kh·∫©n c·∫•p */}
        {urgentRequest && (
          <Card sx={{ mb: 4, border: '2px solid #d32f2f' }}>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Warning sx={{ color: '#d32f2f', mr: 1 }} />
                <Typography variant="h6" sx={{ color: '#d32f2f', fontWeight: 'bold' }}>
                  Th√¥ng Tin Y√™u C·∫ßu Kh·∫©n C·∫•p
                </Typography>
              </Box>
              
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Bloodtype sx={{ mr: 1, color: '#d32f2f' }} />
                    <Typography variant="body1">
                      <strong>Nh√≥m m√°u c·∫ßn:</strong> {bloodType}
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body1">
                      <strong>B·ªánh nh√¢n:</strong> {urgentRequest.patientName}
                    </Typography>
                  </Box>
                </Grid>
                <Grid item xs={12} md={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <LocationOn sx={{ mr: 1, color: '#d32f2f' }} />
                    <Typography variant="body1">
                      <strong>ƒê·ªãa ƒëi·ªÉm:</strong> B·ªánh vi·ªán Truy·ªÅn m√°u Huy·∫øt h·ªçc
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body1">
                      <strong>L√Ω do:</strong> {urgentRequest.reason || 'Kh·∫©n c·∫•p'}
                    </Typography>
                  </Box>
                </Grid>
              </Grid>

              <Divider sx={{ my: 2 }} />
              
              <Alert severity="warning" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p. 
                  Staff s·∫Ω li√™n h·ªá v·ªõi b·∫°n ngay ƒë·ªÉ s·∫Øp x·∫øp th·ªùi gian hi·∫øn m√°u ph√π h·ª£p.
                </Typography>
              </Alert>
            </CardContent>
          </Card>
        )}

        {/* Form ƒëƒÉng k√Ω */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom sx={{ color: '#1976d2', fontWeight: 'bold' }}>
              Th√¥ng Tin ƒêƒÉng K√Ω Hi·∫øn M√°u
            </Typography>

            <Box component="form" onSubmit={formik.handleSubmit} sx={{ mt: 2 }}>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel id="componentId-label">Ch·∫ø ph·∫©m m√°u</InputLabel>
                    <Select
                      labelId="componentId-label"
                      id="componentId"
                      name="componentId"
                      value={formik.values.componentId}
                      onChange={formik.handleChange}
                      error={formik.touched.componentId && Boolean(formik.errors.componentId)}
                      label="Ch·∫ø ph·∫©m m√°u"
                    >
                      {bloodComponents.map((component) => (
                        <MenuItem key={component.componentId} value={component.componentId}>
                          {component.componentName}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    id="donationVolume"
                    name="donationVolume"
                    label="L∆∞·ª£ng m√°u hi·∫øn (ml)"
                    type="number"
                    value={formik.values.donationVolume}
                    onChange={formik.handleChange}
                    error={formik.touched.donationVolume && Boolean(formik.errors.donationVolume)}
                    helperText={formik.touched.donationVolume && formik.errors.donationVolume}
                    inputProps={{ min: 250, max: 500 }}
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    id="patientCondition"
                    name="patientCondition"
                    label="T√¨nh tr·∫°ng b·ªánh nh√¢n"
                    value={formik.values.patientCondition}
                    onChange={formik.handleChange}
                    error={formik.touched.patientCondition && Boolean(formik.errors.patientCondition)}
                    helperText={formik.touched.patientCondition && formik.errors.patientCondition}
                    placeholder="V√≠ d·ª•: C·∫ßn m√°u g·∫•p cho ca ph·∫´u thu·∫≠t kh·∫©n c·∫•p..."
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    id="notes"
                    name="notes"
                    label="Ghi ch√∫ (t√πy ch·ªçn)"
                    multiline
                    rows={3}
                    value={formik.values.notes}
                    onChange={formik.handleChange}
                    error={formik.touched.notes && Boolean(formik.errors.notes)}
                    helperText={formik.touched.notes && formik.errors.notes}
                    placeholder="V√≠ d·ª•: T√¥i c√≥ th·ªÉ hi·∫øn m√°u ngay l·∫≠p t·ª©c n·∫øu c·∫ßn..."
                  />
                </Grid>
              </Grid>

              <Box sx={{ mt: 4, display: 'flex', gap: 2, justifyContent: 'center' }}>
                <Button
                  variant="outlined"
                  onClick={() => navigate('/')}
                  disabled={loading}
                  sx={{ minWidth: 120 }}
                >
                  H·ªßy
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  disabled={loading}
                  sx={{ 
                    minWidth: 200,
                    bgcolor: '#d32f2f',
                    '&:hover': { bgcolor: '#b71c1c' }
                  }}
                  startIcon={loading ? <CircularProgress size={20} /> : <Schedule />}
                >
                  {loading ? 'ƒêang ƒëƒÉng k√Ω...' : 'ƒêƒÉng K√Ω Hi·∫øn M√°u Kh·∫©n C·∫•p'}
                </Button>
              </Box>
            </Box>
          </CardContent>
        </Card>

        {/* Th√¥ng tin b·ªï sung */}
        <Card sx={{ mt: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom sx={{ color: '#2e7d32', fontWeight: 'bold' }}>
              üìã ƒêi·ªÅu Ki·ªán Hi·∫øn M√°u
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ Tu·ªïi t·ª´ 18-60 tu·ªïi
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ C√¢n n·∫∑ng t·ª´ 45kg tr·ªü l√™n
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ S·ª©c kh·ªèe t·ªët, kh√¥ng m·∫Øc b·ªánh truy·ªÅn nhi·ªÖm
                </Typography>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ Kh√¥ng hi·∫øn m√°u trong 84 ng√†y g·∫ßn nh·∫•t
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ Kh√¥ng u·ªëng r∆∞·ª£u bia 24h tr∆∞·ªõc khi hi·∫øn
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚úÖ ƒÇn nh·∫π tr∆∞·ªõc khi hi·∫øn m√°u
                </Typography>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      </Box>

      {/* Snackbar th√¥ng b√°o */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <MuiAlert 
          elevation={6} 
          variant="filled" 
          severity={snackbar.severity}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
        >
          {snackbar.message}
        </MuiAlert>
      </Snackbar>
    </Box>
  );
};

export default UrgentDonationRegistration; 